spring.application.name=hotelManagement

# H2 Database Configuration
# File-based storage: Data will be saved in 'hoteldb.mv.db' in the project root
# In src/main/resources/application.properties
# Old: jdbc:h2:file:./hoteldb;AUTO_SERVER=TRUE
# New: Store DB file in a 'data' subdirectory relative to the app's working dir (/app)
spring.datasource.url=jdbc:h2:file:./data/hoteldb;AUTO_SERVER=TRUE
# Other properties remain the same...
spring.datasource.driverClassName=org.h2.Driver
# ... etc ...
#spring.datasource.url=jdbc:h2:file:./hoteldb;AUTO_SERVER=TRUE
#spring.datasource.driverClassName=org.h2.Driver
# Default H2 username
spring.datasource.username=sa
# Default H2 password (empty)
spring.datasource.password=

# Allow H2 console access via browser
spring.h2.console.enabled=true
# URL to access the console: http://localhost:8080/h2-console
spring.h2.console.path=/h2-console
spring.h2.console.settings.web-allow-others=false

# JPA/Hibernate Configuration
# Specify H2 dialect
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# Automatically create/update database schema based on entities (good for development)
# Possible values: validate, update, create, create-drop, none
spring.jpa.hibernate.ddl-auto=update
# Show SQL statements Hibernate executes in the console (useful for debugging)
spring.jpa.show-sql=true
# Format the shown SQL statements
spring.jpa.properties.hibernate.format_sql=true